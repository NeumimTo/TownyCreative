plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

group = 'cz.neumimto'
version = '0.0.1'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'com.github.TownyAdvanced:Towny:0.98.6.4'

    implementation("com.electronwill.night-config:yaml:3.6.6") {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"

    testImplementation 'com.github.seeseemelk:MockBukkit-v1.19:2.29.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.0.3'
}


compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    relocate 'co.aikar.commands', 'cz.neumimto.townycreative.acf'
    relocate 'co.aikar.locales', 'cz.neumimto.townycreative.locales'
}

build.dependsOn shadowJar

test {
    useJUnitPlatform()
}